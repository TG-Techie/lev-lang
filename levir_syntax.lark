start: item+

// cminus cannot assign to mebers of exprssion. it must assing to a local

item: classdef | structdef | fndef

list{val, sep}: val (sep val)* sep?

classdef: "class" "("  typename "," mbrs ")"
structdef: "struct" "(" typename "," mbrs ")"
fndef: "fn" "(" fnname "," rettype "," args "," locals "," frame ")"

//mthddef: "method(...)"
// selftype: ("mutbl" "(" type ")") | type

frame: "frame" "(" stmt+ ")"

// info sets
mbrs: "mbrs" "(" list{mbr, ","} ")"
mbr: "mbr" "(" name "," type ")"

args: "args" "(" list{arg, ","}? ")"
arg: "arg" "(" name "," type ")"

locals: "locals" "(" list{lcl, ","}? ")"
lcl: "lcl" "(" name "," type ")"

// statments
stmt: asn_stmt      | ret_stmt      | brk_stmt
    | cont_stmt     | loop_stmt     | dbg_stmt
    | passthrough_comment
asn_stmt: "asn" "(" subject "," expr "," type ")"

ret_stmt:  "ret" "(" expr "," type ")"
brk_stmt:  "brk"
cont_stmt: "cont"
loop_stmt: "loop" "(" stmt* ")"

passthrough_comment: "btw" "(" list{STRING, ","} ")" // turns into STRING ;

dbg_stmt: "dbg" "(" list{_dbg_content, ","} ")"
_dbg_content: IDENT | stmt | item | subject
            | _dbg_content "(" _dbg_content ")"
            |  _c_symbol _dbg_content
            | _dbg_content _c_symbol
            | _dbg_content _c_symbol? _dbg_content

_c_symbol: "."  | "*" | "->" | "^" | "!" | "|" | "&" | "||"
        | "&&" | "+" | "-"  | "*" | "&" | "~" |

// expressions

expr: get_expr | fncall_expr    | mthdcall_expr
    | new_expr | litrl_expr

get_expr: "get" "(" subject "," type ")"

fncall_expr: "fncall" "(" fnname ","  call_params ")"
mthdcall_expr: "mthdcall" "(" type "," fnname "," selfexpr "," call_params ")"
selfexpr: "mutself" "(" expr ")" | "self" "(" expr ")"

call_params: "(" list{expr, ","} ")"

new_expr: "new" "(" type "," new_body ")"
litrl_expr: "litrl" "(" type "," literal ")"

new_body: "cntn" "(" list{expr, ","} ")"

subject: var_subject | mbrof_subject
var_subject: "var" "(" varname "," vartype")"
mbrof_subject: "mbrof" "(" varname "," vartype "," (mbr | mbrs) ")"
// "mutselfprx" "(" varname "," vartype ")"

// named idents (for clarity)
name: IDENT

type: IDENT
typename: type

mbrtype: type
mbrname: IDENT

vartype:type
varname:IDENT

fnname: IDENT
rettype: IDENT // mutble proxies cannot be returned



literal: STRING | LONGSTRING | FLOAT | INT

DBG_IDENT: /dbg_[_A-z0-9]*/
IDENT: /[_A-z][_A-z0-9]*/

STRING: /("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
LONGSTRING: /(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/is
FLOAT: /((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i
INT: /[0-9]+/i


%ignore COMMENT
// %ignore C_MACRO
%ignore /[ \n\t]+/

C_MACRO: /#[A-z]+ (?:.*\\\r?\n)*[^\n]*\n/ // c #def or #incl macros

COMMENT: MULTILINE_COMMENT | SINGLELINE_COMMENT
MULTILINE_COMMENT: /\/\/[^\n]*/ // single line c comment
SINGLELINE_COMMENT: /\/\*[\s\S]*?\*\// // multi line c comment
